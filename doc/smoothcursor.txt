*smoothcursor.txt*                                                  SmoothCursor

Author: Gen Fujimoto

                                       Type |gO| to see the table of contents.

================================================================================
INTRODUCTION                                                 *SmoothCursor.nvim*

    SmoothCursor.nvim is a plugin to add a colorful sub-cursor in neovim.

    It is easy to lose current cursor position, when using commands like `%`
    or `<c-f>`,`<c-b>`. This plugin add sub-cursor to show scroll direction!!

===============================================================================
FUNCTIONS                                              *smoothcursor-functions*

							*smoothcursor-setup()*
setup({opts})
    Overwrites the default options with the options in the table `opts`,

    Example with all the default options: >lua
        require('smoothcursor').setup({
            type = "default",           -- Cursor movement calculation method, choose "default", "exp" (exponential) or "matrix".

            cursor = "",              -- Cursor shape (requires Nerd Font). Disabled in fancy mode.
            texthl = "SmoothCursor",   -- Highlight group. Default is { bg = nil, fg = "#FFD400" }. Disabled in fancy mode.
            linehl = nil,              -- Highlights the line under the cursor, similar to 'cursorline'. "CursorLine" is recommended. Disabled in fancy mode.

            fancy = {
                enable = false,        -- enable fancy mode
                head = { cursor = "▷", texthl = "SmoothCursor", linehl = nil }, -- false to disable fancy head
                body = {
                    { cursor = "󰝥", texthl = "SmoothCursorRed" },
                    { cursor = "󰝥", texthl = "SmoothCursorOrange" },
                    { cursor = "●", texthl = "SmoothCursorYellow" },
                    { cursor = "●", texthl = "SmoothCursorGreen" },
                    { cursor = "•", texthl = "SmoothCursorAqua" },
                    { cursor = ".", texthl = "SmoothCursorBlue" },
                    { cursor = ".", texthl = "SmoothCursorPurple" },
                },
                tail = { cursor = nil, texthl = "SmoothCursor" } -- false to disable fancy tail
            },

            matrix = {  -- Loaded when 'type' is set to "matrix"
                head = {
                    -- Picks a random character from this list for the cursor text
                    cursor = require('smoothcursor.matrix_chars'),
                    -- Picks a random highlight from this list for the cursor text
                    texthl = {
                        'SmoothCursor',
                    },
                    linehl = nil,  -- No line highlight for the head
                },
                body = {
                    length = 6,  -- Specifies the length of the cursor body
                    -- Picks a random character from this list for the cursor body text
                    cursor = require('smoothcursor.matrix_chars'),
                    -- Picks a random highlight from this list for each segment of the cursor body
                    texthl = {
                        'SmoothCursorGreen',
                    },
                },
                tail = {
                    -- Picks a random character from this list for the cursor tail (if any)
                    cursor = nil,
                    -- Picks a random highlight from this list for the cursor tail
                    texthl = {
                        'SmoothCursor',
                    },
                },
                unstop = false,  -- Determines if the cursor should stop or not (false means it will stop)
            },

            autostart = true,           -- Automatically start SmoothCursor
            always_redraw = true,       -- Redraw the screen on each update
            flyin_effect = nil,         -- Choose "bottom" or "top" for flying effect
            speed = 25,                 -- Max speed is 100 to stick with your current position
            intervals = 35,             -- Update intervals in milliseconds
            priority = 10,              -- Set marker priority
            timeout = 3000,             -- Timeout for animations in milliseconds
            threshold = 3,              -- Animate only if cursor moves more than this many lines
	    max_threshold = 500         -- If you move more than this many lines, don't animate
            disable_float_win = false,  -- Disable in floating windows
            enabled_filetypes = nil,    -- Enable only for specific file types, e.g., { "lua", "vim" }
            disabled_filetypes = nil,   -- Disable for these file types, ignored if enabled_filetypes is set. e.g., { "TelescopePrompt", "NvimTree" }
        })
<

							*smoothcursor-utils-with_smoothcursor*
utils.with_smoothcursor(func, args...)
    Call func(args...) with SmoothCursor. Func will be some move command. (like
    `vim.cmd("nomrmal n")` )

    Example: >lua
        -- SmoothCursor when press 'n'

        vim.keymap.set("n", "n",
            function()
                require("smoothcursor.utils").with_smoothcursor(pcall, vim.cmd, "normal! n")
            end,
            { noremap = true, silent = true }
        )
<

							*smoothcursor-utils-smoothcursor_start*
utils.smoothcursor_start()
    Start SmoothCursor

							*smoothcursor-utils-smoothcursor_stop*
utils.smoothcursor_stop()
    Stop SmoothCursor

							*smoothcursor-utils-smoothcursor_toggle*
utils.smoothcursor_toggle()
    Toggle SmoothCursor

							*smoothcursor-utils-smoothcursor_status*
utils.smoothcursor_status()
    Get SmoothCursor Status.

    Return: boolean

							*smoothcursor-utils-smoothcursor_fancy_set*
utils.smoothcursor_fancy_set({arg})
    Set the fancy mode.

    Parameters:  
      • {arg}: boolean

							*smoothcursor-utils-smoothcursor_fancy_toggle*
utils.smoothcursor_fancy_toggle()
    Tooggle the fancy mode.

							*smoothcursor-utils-smoothcursor_fancy_on*
utils.smoothcursor_fancy_on()
    Turn on the fancy mode.

							*smoothcursor-utils-smoothcursor_fancy_off*
utils.smoothcursor_fancy_off()
    Turn off the fancy mode.

===============================================================================
COMMANDS                                                *smoothcursor-commands*


							*:SmoothCursorStart*
:SmoothCursorStart
    Start SmoothCursor

							*:SmoothCursorStop*
:SmoothCursorStop
    Stop SmoothCursor

    Options:
        --keep-signs		Stop SmoothCursor without deleting signs.

							*:SmoothCursorStatus*
:SmoothCursorStatus
    Show SmoothCursor status

							*:SmoothCursorToggle*
:SmoothCursorToggle
    Toggle SmoothCursor

							*:SmoothCursorFancyToggle*
:SmoothCursorFancyToggle
    Toggle fancy mode

							*:SmoothCursorFancyOn*
:SmoothCursorFancyOn
    Turn on fancy mode

							*:SmoothCursorFancyOff*
:SmoothCursorFancyOff
    Turn off fancy mode

							*:SmoothCursorDeleteSigns*
:SmoothCursorDeleteSigns
    Delete all signs placed by SmoothCursor.


vim:tw=78:ts=8:expandtab:noet:ft=help:norl:
